#include <iostream>
#include <vector>

//Вектор это часть системы коллекций stl\
\
\
vector и array реализ модель хранения: линейн массив\
vector - решение по умолчанию для любой коллекции данных в программе\
использоватьб другие требуется только тогда, когда ест особые\
тебованя к алгоритмам котор будут взаим с коллекцией\
\
\
\Требования для работы:\
    1) чтобы созд объект вектора треб указ полн тип в качестве типа для работы\
    2) для работы осн методов класса тип должен  соддерж:\
        конструктор по умолч\
        конструктр копир\
        присваивание копир\
        деструктор\
    3) для работы методов заполн треб налич конструктора с параметрами

class Degradant
{
public:
    Degradant() { std::cout << "Def construct\n"; }

    Degradant(int val):a_(val)
    {
        std::cout << "Param construct\n";
    }
    Degradant(const Degradant& other) :a_(other.a_) { std::cout << "Copy construct\n"; }
    ~Degradant() { std::cout << "Def Destr\n"; }




private:
    int a_;
};


    

int main()
{
    //std::vector<int> arr;// вектор от полн типа int
    //std::vector<void> arr2;//вектор от неполн типа void
    //вторая строчка сломает программу
    std::vector<Degradant> arr3(3);
    //надо создать конструктор по умолчанию
    arr3.reserve(1000);
    //Метод резервирует по исп память на столько эл-тов\
    сколько указалиб но не созд их сразу\
    При прочих равных пракильнее создать пустой вектор и\
    зарезерв память а не созд вектопр пустышек конструктором

    arr3.resize(10);
    //измен размер хран эл-тов (их кол-во)\
    если новый размер больше, то в конец массива добавляются пустышки\
    если меньше - то всё что не поместилось уничтожаются
    arr3.shrink_to_fit();
    //Не измен кол-во хран эл-тов но освбожд неисп коллекцией кусок памяти

    //push_back, emplace_back
    //Для пушбека нужен конструкт копирования а для емплейса - нет

    arr3.push_back(Degradant(4));
    arr3.emplace_back(6);
    //пушбек для классов с конструкт от двух параметров и более не сможет вызватся если напрям не указ класс
    //arr3.pop_back(); - удаляет послед еллемент вектора

    auto it = arr3.begin();//даёт итератор на начало колекции, arr2.end() - конец

    arr3.erase(it + 2);
    //мы удалили эл на две ечейки вправо от начало
    //они сохраняют расподложение первого эл-та коллекции\
    при необход можно сместить его положение с помощью операторов ++, --, +, -, +=, -= по правилам указателей 

    arr3.insert(it + 2, Degradant(8));//размещениет эл-тов на нужной позиции

    arr3.emplace(arr3.begin() + 3, 6);//тоже самое, но можно не указывать класса

    return 0;
 }

